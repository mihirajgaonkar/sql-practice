Table: Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.
 

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
 

Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 

Write a solution to:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.

 

Example 1:

Input: 
Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+
Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+
MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+
Output: 
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+
Explanation: 
Daniel and Monica have rated 3 movies ("Avengers", "Frozen 2" and "Joker") but Daniel is smaller lexicographically.
Frozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically.
My solution:
-- Write your PostgreSQL query statement below
with ratings as (
    select a.movie_id,
        a.title,
        round(avg(b.rating),1)
    from Movies a left join MovieRating b on a.movie_id = b.movie_id
    where to_char(b.created_at,'mm-yyyy') = '02-2020'
    group by a.movie_id, a.title
    order by round(avg(b.rating),1) desc, a.title asc
    limit 1 
),

critics as (
    select x.user_id,
        y.name,
        count(x.movie_id) as reviewed_count
    from MovieRating x left join Users y on x.user_id = y.user_id
    group by x.user_id, y.name
    order by reviewed_count desc, y.name asc
    limit 1
)

select title as results from ratings
union all
select name from critics


Fastest solution:
(
	select
		u.name as results
	from Users as u
		left join MovieRating as mr on mr.user_id = u.user_id
	group by
		u.name
	order by
		count(u.user_id) desc,
		u.name
	limit 1
)

union all 

(	
    select mo.title as results
	from
		MovieRating as mr
		left join Movies as mo on mr.movie_id = mo.movie_id
	where
		mr.created_at between '2020-02-01'
		and '2020-02-29'
	group by mo.title
	order by
		avg(mr.rating) desc,
		mo.title
	limit 1
)